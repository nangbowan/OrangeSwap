/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface OrgbundrebateInterface extends utils.Interface {
  functions: {
    "addinvite(address,address)": FunctionFragment;
    "addreward(address,uint256)": FunctionFragment;
    "addreward_release(address,uint256)": FunctionFragment;
    "addrewardlist(address[],uint256[])": FunctionFragment;
    "addswapreward(address,uint256)": FunctionFragment;
    "addswapreward_release(address,uint256)": FunctionFragment;
    "addswaprewardlist(address[],uint256[])": FunctionFragment;
    "claimrebate()": FunctionFragment;
    "claimswaprebate()": FunctionFragment;
    "getinvitelist(address)": FunctionFragment;
    "getinvitelistlen(address)": FunctionFragment;
    "getinviter(address)": FunctionFragment;
    "getinviterlen()": FunctionFragment;
    "getinviters()": FunctionFragment;
    "impawnnum()": FunctionFragment;
    "invitelist(address,uint256)": FunctionFragment;
    "inviters(uint256)": FunctionFragment;
    "ishavepermission(address)": FunctionFragment;
    "orgtoken()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerclaimtoken(address)": FunctionFragment;
    "reward(address)": FunctionFragment;
    "reward_release(address)": FunctionFragment;
    "setcanclaim(bool)": FunctionFragment;
    "setimpawnnum(uint256)": FunctionFragment;
    "setorgtoken(address)": FunctionFragment;
    "setpermission(address,bool)": FunctionFragment;
    "setreward(address,uint256)": FunctionFragment;
    "setreward_release(address,uint256)": FunctionFragment;
    "setswaprate(uint256)": FunctionFragment;
    "setswapreward(address,uint256)": FunctionFragment;
    "setswapreward_release(address,uint256)": FunctionFragment;
    "settradenum(uint256)": FunctionFragment;
    "setusernum(uint256)": FunctionFragment;
    "swaprate()": FunctionFragment;
    "swapreward(address)": FunctionFragment;
    "swapreward_release(address)": FunctionFragment;
    "tradenum()": FunctionFragment;
    "user_invite(address)": FunctionFragment;
    "usernum()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addinvite",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addreward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addreward_release",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addrewardlist",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addswapreward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addswapreward_release",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addswaprewardlist",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimrebate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimswaprebate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getinvitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getinvitelistlen",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getinviter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getinviterlen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getinviters",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "impawnnum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "invitelist",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "inviters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ishavepermission",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "orgtoken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerclaimtoken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "reward", values: [string]): string;
  encodeFunctionData(
    functionFragment: "reward_release",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setcanclaim",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setimpawnnum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setorgtoken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setpermission",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setreward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setreward_release",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setswaprate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setswapreward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setswapreward_release",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settradenum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setusernum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "swaprate", values?: undefined): string;
  encodeFunctionData(functionFragment: "swapreward", values: [string]): string;
  encodeFunctionData(
    functionFragment: "swapreward_release",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tradenum", values?: undefined): string;
  encodeFunctionData(functionFragment: "user_invite", values: [string]): string;
  encodeFunctionData(functionFragment: "usernum", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addinvite", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addreward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addreward_release",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addrewardlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addswapreward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addswapreward_release",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addswaprewardlist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimrebate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimswaprebate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getinvitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getinvitelistlen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getinviter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getinviterlen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getinviters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "impawnnum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invitelist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inviters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ishavepermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orgtoken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerclaimtoken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reward_release",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setcanclaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setimpawnnum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setorgtoken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setpermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setreward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setreward_release",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setswaprate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setswapreward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setswapreward_release",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settradenum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setusernum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swaprate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapreward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapreward_release",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tradenum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "user_invite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usernum", data: BytesLike): Result;

  events: {};
}

export interface Orgbundrebate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OrgbundrebateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addinvite(
      user: string,
      inviter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addreward(
      user: string,
      addrewardnum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addreward_release(
      user: string,
      addrewardnum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addrewardlist(
      users: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addswapreward(
      user: string,
      addswaprewardnum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addswapreward_release(
      user: string,
      addswaprewardnum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addswaprewardlist(
      users: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimrebate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimswaprebate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getinvitelist(
      inviter: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getinvitelistlen(
      inviter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getinviter(user: string, overrides?: CallOverrides): Promise<[string]>;

    getinviterlen(overrides?: CallOverrides): Promise<[BigNumber]>;

    getinviters(overrides?: CallOverrides): Promise<[string[]]>;

    impawnnum(overrides?: CallOverrides): Promise<[BigNumber]>;

    invitelist(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    inviters(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    ishavepermission(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    orgtoken(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerclaimtoken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reward(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    reward_release(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setcanclaim(
      _canclaim: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setimpawnnum(
      _impawnnum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setorgtoken(
      _orgtoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setpermission(
      manage: string,
      permission: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setreward(
      user: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setreward_release(
      user: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setswaprate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setswapreward(
      user: string,
      _swapreward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setswapreward_release(
      user: string,
      _swapreward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settradenum(
      _tradenum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setusernum(
      _usernum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swaprate(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapreward(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    swapreward_release(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tradenum(overrides?: CallOverrides): Promise<[BigNumber]>;

    user_invite(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    usernum(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addinvite(
    user: string,
    inviter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addreward(
    user: string,
    addrewardnum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addreward_release(
    user: string,
    addrewardnum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addrewardlist(
    users: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addswapreward(
    user: string,
    addswaprewardnum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addswapreward_release(
    user: string,
    addswaprewardnum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addswaprewardlist(
    users: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimrebate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimswaprebate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getinvitelist(inviter: string, overrides?: CallOverrides): Promise<string[]>;

  getinvitelistlen(
    inviter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getinviter(user: string, overrides?: CallOverrides): Promise<string>;

  getinviterlen(overrides?: CallOverrides): Promise<BigNumber>;

  getinviters(overrides?: CallOverrides): Promise<string[]>;

  impawnnum(overrides?: CallOverrides): Promise<BigNumber>;

  invitelist(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  inviters(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  ishavepermission(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  orgtoken(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerclaimtoken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reward(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  reward_release(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  setcanclaim(
    _canclaim: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setimpawnnum(
    _impawnnum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setorgtoken(
    _orgtoken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setpermission(
    manage: string,
    permission: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setreward(
    user: string,
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setreward_release(
    user: string,
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setswaprate(
    rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setswapreward(
    user: string,
    _swapreward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setswapreward_release(
    user: string,
    _swapreward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settradenum(
    _tradenum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setusernum(
    _usernum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swaprate(overrides?: CallOverrides): Promise<BigNumber>;

  swapreward(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  swapreward_release(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tradenum(overrides?: CallOverrides): Promise<BigNumber>;

  user_invite(arg0: string, overrides?: CallOverrides): Promise<string>;

  usernum(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addinvite(
      user: string,
      inviter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addreward(
      user: string,
      addrewardnum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addreward_release(
      user: string,
      addrewardnum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addrewardlist(
      users: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    addswapreward(
      user: string,
      addswaprewardnum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addswapreward_release(
      user: string,
      addswaprewardnum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addswaprewardlist(
      users: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimrebate(overrides?: CallOverrides): Promise<void>;

    claimswaprebate(overrides?: CallOverrides): Promise<void>;

    getinvitelist(
      inviter: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getinvitelistlen(
      inviter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getinviter(user: string, overrides?: CallOverrides): Promise<string>;

    getinviterlen(overrides?: CallOverrides): Promise<BigNumber>;

    getinviters(overrides?: CallOverrides): Promise<string[]>;

    impawnnum(overrides?: CallOverrides): Promise<BigNumber>;

    invitelist(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    inviters(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    ishavepermission(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    orgtoken(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerclaimtoken(token: string, overrides?: CallOverrides): Promise<void>;

    reward(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reward_release(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setcanclaim(_canclaim: boolean, overrides?: CallOverrides): Promise<void>;

    setimpawnnum(
      _impawnnum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setorgtoken(_orgtoken: string, overrides?: CallOverrides): Promise<void>;

    setpermission(
      manage: string,
      permission: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setreward(
      user: string,
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setreward_release(
      user: string,
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setswaprate(rate: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setswapreward(
      user: string,
      _swapreward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setswapreward_release(
      user: string,
      _swapreward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    settradenum(
      _tradenum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setusernum(
      _usernum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swaprate(overrides?: CallOverrides): Promise<BigNumber>;

    swapreward(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    swapreward_release(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradenum(overrides?: CallOverrides): Promise<BigNumber>;

    user_invite(arg0: string, overrides?: CallOverrides): Promise<string>;

    usernum(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addinvite(
      user: string,
      inviter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addreward(
      user: string,
      addrewardnum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addreward_release(
      user: string,
      addrewardnum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addrewardlist(
      users: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addswapreward(
      user: string,
      addswaprewardnum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addswapreward_release(
      user: string,
      addswaprewardnum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addswaprewardlist(
      users: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimrebate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimswaprebate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getinvitelist(
      inviter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getinvitelistlen(
      inviter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getinviter(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getinviterlen(overrides?: CallOverrides): Promise<BigNumber>;

    getinviters(overrides?: CallOverrides): Promise<BigNumber>;

    impawnnum(overrides?: CallOverrides): Promise<BigNumber>;

    invitelist(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inviters(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ishavepermission(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orgtoken(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerclaimtoken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reward(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    reward_release(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setcanclaim(
      _canclaim: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setimpawnnum(
      _impawnnum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setorgtoken(
      _orgtoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setpermission(
      manage: string,
      permission: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setreward(
      user: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setreward_release(
      user: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setswaprate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setswapreward(
      user: string,
      _swapreward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setswapreward_release(
      user: string,
      _swapreward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settradenum(
      _tradenum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setusernum(
      _usernum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swaprate(overrides?: CallOverrides): Promise<BigNumber>;

    swapreward(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    swapreward_release(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradenum(overrides?: CallOverrides): Promise<BigNumber>;

    user_invite(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    usernum(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addinvite(
      user: string,
      inviter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addreward(
      user: string,
      addrewardnum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addreward_release(
      user: string,
      addrewardnum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addrewardlist(
      users: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addswapreward(
      user: string,
      addswaprewardnum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addswapreward_release(
      user: string,
      addswaprewardnum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addswaprewardlist(
      users: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimrebate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimswaprebate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getinvitelist(
      inviter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getinvitelistlen(
      inviter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getinviter(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getinviterlen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getinviters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    impawnnum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    invitelist(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inviters(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ishavepermission(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orgtoken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerclaimtoken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reward(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reward_release(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setcanclaim(
      _canclaim: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setimpawnnum(
      _impawnnum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setorgtoken(
      _orgtoken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setpermission(
      manage: string,
      permission: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setreward(
      user: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setreward_release(
      user: string,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setswaprate(
      rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setswapreward(
      user: string,
      _swapreward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setswapreward_release(
      user: string,
      _swapreward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settradenum(
      _tradenum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setusernum(
      _usernum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swaprate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapreward(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapreward_release(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradenum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    user_invite(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usernum(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
